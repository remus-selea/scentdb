plugins {
    id "org.springframework.boot" version "${springBoot}"
    id 'io.spring.dependency-management' version "${springDependencyManagement}"
    id "org.sonarqube" version "${sonarQubePlugin}"
    id 'java'
}

group = 'com.github.remus-selea'
version = "${major}" + "." + "${minor}" + "." + "${patch}"
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    /** SPRING  **/
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-hateoas"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-web"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    /** SPRING CLOUD SLEUTH **/
    implementation "org.springframework.cloud:spring-cloud-starter-sleuth:${springCloudSleuth}"

    /** SPRING BOOT ADMIN CLIENT **/
    implementation "de.codecentric:spring-boot-admin-starter-client:${springBootAdmin}"

    /** LOMBOK **/
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"

    /** SPRINGDOC **/
    implementation "org.springdoc:springdoc-openapi-ui:${springDoc}"

    /** POSTGRESQL **/
    runtimeOnly "org.postgresql:postgresql"

    /** H2 **/
    compile "com.h2database:h2:${h2Database}"

    /** MAPSTRUCT **/
    implementation "org.mapstruct:mapstruct:${mapstruct}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct}"

    /** LOGSTASH LOGBACK ENCODER **/
    compile "net.logstash.logback:logstash-logback-encoder:${logstashLogBackEncoder}"

    /** # LOGBACK CONDITIONALS **/
     compile "org.codehaus.janino:janino:${janino}"

    /** TESTING  **/
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.springframework.security:spring-security-test"
    testCompile "org.mockito:mockito-core:${mockito}"

    // Test containers
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"

    // If you are using mapstruct in test code
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct}"
}

test {
    useJUnitPlatform()
}
