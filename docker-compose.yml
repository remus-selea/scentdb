version: '3.6'

services:
  elasticsearch:
    container_name: ${ELASTICSEARCH_CONTAINER_NAME}
    image: elasticsearch:$ELK_VERSION
    volumes:
      - type: bind
        source: ./docker/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - ${ELASTICSEARCH_HOST_PORT}:${ELASTICSEARCH_CONTAINER_PORT}
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - scentdb-network

  logstash:
    container_name: ${LOGSTASH_CONTAINER_NAME}
    image: logstash:$ELK_VERSION
    volumes:
      - type: bind
        source: ./docker/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./docker/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
      - type: bind
        source: ./docker/logstash/drivers
        target: /usr/share/logstash/drivers
        read_only: true
    ports:
      - ${LOGSTASH_HOST_PORT}:${LOGSTASH_CONTAINER_PORT}/tcp
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DATABASE_HOST: ${POSTGRES_CONTAINER_NAME}
      DATABASE_PORT: ${POSTGRES_CONTAINER_PORT}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_CONTAINER_NAME}
      ELASTICSEARCH_PORT: ${ELASTICSEARCH_CONTAINER_PORT}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - scentdb-network
    depends_on:
      - elasticsearch

  kibana:
    container_name: kibana_scentdb
    image: kibana:$ELK_VERSION
    volumes:
      - type: bind
        source: ./docker/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - scentdb-network
    depends_on:
      - elasticsearch

  postgres:
    container_name: ${POSTGRES_CONTAINER_NAME}
    image: postgres:$POSTGRES_VERSION
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/data/postgres"
    volumes:
      - postgres:/data/postgres
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - ${POSTGRES_HOST_PORT}:${POSTGRES_CONTAINER_PORT}
    networks:
      - scentdb-network
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_scentdb
    image: dpage/pgadmin4:$PGADMIN_VERSION
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    ports:
      - ${PGADMIN_HOST_PORT}:${PGADMIN_CONTAINER_PORT}
    networks:
      - scentdb-network
    entrypoint:
      - "/bin/sh"
      - "-c"
      - "/bin/echo 'postgres:5432:*:postgres:password' > /tmp/pgpassfile && chmod 600 /tmp/pgpassfile && /entrypoint.sh"
    restart: unless-stopped

  scentdb:
    container_name: scentdb
    build:
      context: .
      dockerfile: Dockerfile
    image: scentdb:latest
    volumes:
      - type: bind
        source: ${IMAGES_DIRECTORY_PATH}
        target: /app/images
    ports:
      - ${SCENTDB_HOST_PORT}:${SCENTDB_CONTAINER_PORT}
    networks:
      - scentdb-network
#    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      DATABASE_HOST: ${POSTGRES_CONTAINER_NAME}
      DATABASE_PORT: ${POSTGRES_CONTAINER_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      LOGSTASH_ENABLED: ${LOGSTASH_ENABLED}
      LOGSTASH_HOST: ${LOGSTASH_CONTAINER_NAME}
      LOGSTASH_PORT: ${LOGSTASH_CONTAINER_PORT}
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: ${ELASTICSEARCH_CONTAINER_PORT}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      IMAGES_PATH: /app/images
    depends_on:
      - elasticsearch
      - logstash
      - postgres

networks:
  scentdb-network:
    driver: bridge

volumes:
  elasticsearch:
  images:
  postgres:
  pgadmin:

